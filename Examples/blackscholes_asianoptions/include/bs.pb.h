// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bs.proto

#ifndef PROTOBUF_bs_2eproto__INCLUDED
#define PROTOBUF_bs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace parameters {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bs_2eproto();
void protobuf_AssignDesc_bs_2eproto();
void protobuf_ShutdownFile_bs_2eproto();

class blackScholes;

// ===================================================================

class blackScholes : public ::google::protobuf::Message {
 public:
  blackScholes();
  virtual ~blackScholes();
  
  blackScholes(const blackScholes& from);
  
  inline blackScholes& operator=(const blackScholes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const blackScholes& default_instance();
  
  void Swap(blackScholes* other);
  
  // implements Message ----------------------------------------------
  
  blackScholes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const blackScholes& from);
  void MergeFrom(const blackScholes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float initPrice = 1;
  inline bool has_initprice() const;
  inline void clear_initprice();
  static const int kInitPriceFieldNumber = 1;
  inline float initprice() const;
  inline void set_initprice(float value);
  
  // required float strikePrice = 2;
  inline bool has_strikeprice() const;
  inline void clear_strikeprice();
  static const int kStrikePriceFieldNumber = 2;
  inline float strikeprice() const;
  inline void set_strikeprice(float value);
  
  // required float rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline float rate() const;
  inline void set_rate(float value);
  
  // required float volatility = 4;
  inline bool has_volatility() const;
  inline void clear_volatility();
  static const int kVolatilityFieldNumber = 4;
  inline float volatility() const;
  inline void set_volatility(float value);
  
  // required float time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline float time() const;
  inline void set_time(float value);
  
  // required string kernel_name = 6;
  inline bool has_kernel_name() const;
  inline void clear_kernel_name();
  static const int kKernelNameFieldNumber = 6;
  inline const ::std::string& kernel_name() const;
  inline void set_kernel_name(const ::std::string& value);
  inline void set_kernel_name(const char* value);
  inline void set_kernel_name(const char* value, size_t size);
  inline ::std::string* mutable_kernel_name();
  inline ::std::string* release_kernel_name();
  
  // @@protoc_insertion_point(class_scope:parameters.blackScholes)
 private:
  inline void set_has_initprice();
  inline void clear_has_initprice();
  inline void set_has_strikeprice();
  inline void clear_has_strikeprice();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_volatility();
  inline void clear_has_volatility();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_kernel_name();
  inline void clear_has_kernel_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float initprice_;
  float strikeprice_;
  float rate_;
  float volatility_;
  ::std::string* kernel_name_;
  float time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();
  
  void InitAsDefaultInstance();
  static blackScholes* default_instance_;
};
// ===================================================================


// ===================================================================

// blackScholes

// required float initPrice = 1;
inline bool blackScholes::has_initprice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blackScholes::set_has_initprice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blackScholes::clear_has_initprice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blackScholes::clear_initprice() {
  initprice_ = 0;
  clear_has_initprice();
}
inline float blackScholes::initprice() const {
  return initprice_;
}
inline void blackScholes::set_initprice(float value) {
  set_has_initprice();
  initprice_ = value;
}

// required float strikePrice = 2;
inline bool blackScholes::has_strikeprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blackScholes::set_has_strikeprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blackScholes::clear_has_strikeprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blackScholes::clear_strikeprice() {
  strikeprice_ = 0;
  clear_has_strikeprice();
}
inline float blackScholes::strikeprice() const {
  return strikeprice_;
}
inline void blackScholes::set_strikeprice(float value) {
  set_has_strikeprice();
  strikeprice_ = value;
}

// required float rate = 3;
inline bool blackScholes::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blackScholes::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blackScholes::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blackScholes::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float blackScholes::rate() const {
  return rate_;
}
inline void blackScholes::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// required float volatility = 4;
inline bool blackScholes::has_volatility() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blackScholes::set_has_volatility() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blackScholes::clear_has_volatility() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blackScholes::clear_volatility() {
  volatility_ = 0;
  clear_has_volatility();
}
inline float blackScholes::volatility() const {
  return volatility_;
}
inline void blackScholes::set_volatility(float value) {
  set_has_volatility();
  volatility_ = value;
}

// required float time = 5;
inline bool blackScholes::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void blackScholes::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void blackScholes::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void blackScholes::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float blackScholes::time() const {
  return time_;
}
inline void blackScholes::set_time(float value) {
  set_has_time();
  time_ = value;
}

// required string kernel_name = 6;
inline bool blackScholes::has_kernel_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void blackScholes::set_has_kernel_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void blackScholes::clear_has_kernel_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void blackScholes::clear_kernel_name() {
  if (kernel_name_ != &::google::protobuf::internal::kEmptyString) {
    kernel_name_->clear();
  }
  clear_has_kernel_name();
}
inline const ::std::string& blackScholes::kernel_name() const {
  return *kernel_name_;
}
inline void blackScholes::set_kernel_name(const ::std::string& value) {
  set_has_kernel_name();
  if (kernel_name_ == &::google::protobuf::internal::kEmptyString) {
    kernel_name_ = new ::std::string;
  }
  kernel_name_->assign(value);
}
inline void blackScholes::set_kernel_name(const char* value) {
  set_has_kernel_name();
  if (kernel_name_ == &::google::protobuf::internal::kEmptyString) {
    kernel_name_ = new ::std::string;
  }
  kernel_name_->assign(value);
}
inline void blackScholes::set_kernel_name(const char* value, size_t size) {
  set_has_kernel_name();
  if (kernel_name_ == &::google::protobuf::internal::kEmptyString) {
    kernel_name_ = new ::std::string;
  }
  kernel_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* blackScholes::mutable_kernel_name() {
  set_has_kernel_name();
  if (kernel_name_ == &::google::protobuf::internal::kEmptyString) {
    kernel_name_ = new ::std::string;
  }
  return kernel_name_;
}
inline ::std::string* blackScholes::release_kernel_name() {
  clear_has_kernel_name();
  if (kernel_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kernel_name_;
    kernel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace parameters

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bs_2eproto__INCLUDED
