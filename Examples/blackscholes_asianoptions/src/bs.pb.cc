// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace parameters {

namespace {

const ::google::protobuf::Descriptor* blackScholes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blackScholes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bs_2eproto() {
  protobuf_AddDesc_bs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bs.proto");
  GOOGLE_CHECK(file != NULL);
  blackScholes_descriptor_ = file->message_type(0);
  static const int blackScholes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, initprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, strikeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, volatility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, kernel_name_),
  };
  blackScholes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blackScholes_descriptor_,
      blackScholes::default_instance_,
      blackScholes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blackScholes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blackScholes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blackScholes_descriptor_, &blackScholes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bs_2eproto() {
  delete blackScholes::default_instance_;
  delete blackScholes_reflection_;
}

void protobuf_AddDesc_bs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010bs.proto\022\nparameters\"{\n\014blackScholes\022\021"
    "\n\tinitPrice\030\001 \002(\002\022\023\n\013strikePrice\030\002 \002(\002\022\014"
    "\n\004rate\030\003 \002(\002\022\022\n\nvolatility\030\004 \002(\002\022\014\n\004time"
    "\030\005 \002(\002\022\023\n\013kernel_name\030\006 \002(\t", 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bs.proto", &protobuf_RegisterTypes);
  blackScholes::default_instance_ = new blackScholes();
  blackScholes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bs_2eproto {
  StaticDescriptorInitializer_bs_2eproto() {
    protobuf_AddDesc_bs_2eproto();
  }
} static_descriptor_initializer_bs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int blackScholes::kInitPriceFieldNumber;
const int blackScholes::kStrikePriceFieldNumber;
const int blackScholes::kRateFieldNumber;
const int blackScholes::kVolatilityFieldNumber;
const int blackScholes::kTimeFieldNumber;
const int blackScholes::kKernelNameFieldNumber;
#endif  // !_MSC_VER

blackScholes::blackScholes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void blackScholes::InitAsDefaultInstance() {
}

blackScholes::blackScholes(const blackScholes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void blackScholes::SharedCtor() {
  _cached_size_ = 0;
  initprice_ = 0;
  strikeprice_ = 0;
  rate_ = 0;
  volatility_ = 0;
  time_ = 0;
  kernel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blackScholes::~blackScholes() {
  SharedDtor();
}

void blackScholes::SharedDtor() {
  if (kernel_name_ != &::google::protobuf::internal::kEmptyString) {
    delete kernel_name_;
  }
  if (this != default_instance_) {
  }
}

void blackScholes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blackScholes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blackScholes_descriptor_;
}

const blackScholes& blackScholes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();  return *default_instance_;
}

blackScholes* blackScholes::default_instance_ = NULL;

blackScholes* blackScholes::New() const {
  return new blackScholes;
}

void blackScholes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    initprice_ = 0;
    strikeprice_ = 0;
    rate_ = 0;
    volatility_ = 0;
    time_ = 0;
    if (has_kernel_name()) {
      if (kernel_name_ != &::google::protobuf::internal::kEmptyString) {
        kernel_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blackScholes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float initPrice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initprice_)));
          set_has_initprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_strikePrice;
        break;
      }
      
      // required float strikePrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strikePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strikeprice_)));
          set_has_strikeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rate;
        break;
      }
      
      // required float rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_volatility;
        break;
      }
      
      // required float volatility = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volatility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volatility_)));
          set_has_volatility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_time;
        break;
      }
      
      // required float time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_kernel_name;
        break;
      }
      
      // required string kernel_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kernel_name().data(), this->kernel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void blackScholes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float initPrice = 1;
  if (has_initprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->initprice(), output);
  }
  
  // required float strikePrice = 2;
  if (has_strikeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->strikeprice(), output);
  }
  
  // required float rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rate(), output);
  }
  
  // required float volatility = 4;
  if (has_volatility()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->volatility(), output);
  }
  
  // required float time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time(), output);
  }
  
  // required string kernel_name = 6;
  if (has_kernel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->kernel_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* blackScholes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float initPrice = 1;
  if (has_initprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->initprice(), target);
  }
  
  // required float strikePrice = 2;
  if (has_strikeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->strikeprice(), target);
  }
  
  // required float rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rate(), target);
  }
  
  // required float volatility = 4;
  if (has_volatility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->volatility(), target);
  }
  
  // required float time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time(), target);
  }
  
  // required string kernel_name = 6;
  if (has_kernel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kernel_name().data(), this->kernel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->kernel_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int blackScholes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float initPrice = 1;
    if (has_initprice()) {
      total_size += 1 + 4;
    }
    
    // required float strikePrice = 2;
    if (has_strikeprice()) {
      total_size += 1 + 4;
    }
    
    // required float rate = 3;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // required float volatility = 4;
    if (has_volatility()) {
      total_size += 1 + 4;
    }
    
    // required float time = 5;
    if (has_time()) {
      total_size += 1 + 4;
    }
    
    // required string kernel_name = 6;
    if (has_kernel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kernel_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blackScholes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blackScholes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blackScholes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blackScholes::MergeFrom(const blackScholes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initprice()) {
      set_initprice(from.initprice());
    }
    if (from.has_strikeprice()) {
      set_strikeprice(from.strikeprice());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_volatility()) {
      set_volatility(from.volatility());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_kernel_name()) {
      set_kernel_name(from.kernel_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blackScholes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blackScholes::CopyFrom(const blackScholes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blackScholes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void blackScholes::Swap(blackScholes* other) {
  if (other != this) {
    std::swap(initprice_, other->initprice_);
    std::swap(strikeprice_, other->strikeprice_);
    std::swap(rate_, other->rate_);
    std::swap(volatility_, other->volatility_);
    std::swap(time_, other->time_);
    std::swap(kernel_name_, other->kernel_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blackScholes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blackScholes_descriptor_;
  metadata.reflection = blackScholes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace parameters

// @@protoc_insertion_point(global_scope)
